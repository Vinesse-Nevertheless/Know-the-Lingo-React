{"ast":null,"code":"var _jsxFileName = \"/Users/vanessa/Desktop/GIT/React-QuizComponent/src/QuizQuestion.js\";\n//child component to Quiz.js and QuizQuestionButton\nimport React, { Component } from \"react\";\nimport QuizQuestionButton from \"./QuizQuestionButton.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass QuizQuestion extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.props.quiz_question.instruction_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [this.props.quiz_question.answer_options.map((answer_option, index) =>\n          /*#__PURE__*/\n          //creates a new anonymous function (that's the => part) that receives answer_option & index as a parameter and will return a value of the modified data.\n          _jsxDEV(QuizQuestionButton, {\n            button_text: answer_option,\n            clickHandler: this.handleClick.bind(this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 10\n          }, this)), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 14\n    }, this);\n  }\n\n  handleClick(buttonText) {\n    if (buttonText == this.props.quiz_question.answer) {\n      this.props.showNextQuestionHandler();\n    }\n  }\n\n}\n\nexport default QuizQuestion;","map":{"version":3,"sources":["/Users/vanessa/Desktop/GIT/React-QuizComponent/src/QuizQuestion.js"],"names":["React","Component","QuizQuestionButton","QuizQuestion","render","props","quiz_question","instruction_text","answer_options","map","answer_option","index","handleClick","bind","buttonText","answer","showNextQuestionHandler"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;;;AAEA,MAAMC,YAAN,SAA2BF,SAA3B,CAAoC;AAChCG,EAAAA,MAAM,GAAE;AACN,wBAAO;AAAA,mCACP;AAAA,+BACE;AAAA,oBAAI,KAAKC,KAAL,CAAWC,aAAX,CAAyBC;AAA7B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADO,eAIP;AAAS,QAAA,SAAS,EAAC,SAAnB;AAAA,+BACE;AAAA,qBAOC,KAAKF,KAAL,CAAWC,aAAX,CAAyBE,cAAzB,CAAwCC,GAAxC,CAA4C,CAACC,aAAD,EAAgBC,KAAhB;AAAA;AAA6B;AACzE,kBAAC,kBAAD;AAAgC,YAAA,WAAW,EAAID,aAA/C;AAA8D,YAAA,YAAY,EAAI,KAAKE,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB;AAA9E,aAAyBF,KAAzB;AAAA;AAAA;AAAA;AAAA,kBADA,CAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJO;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAiBD;;AACLC,EAAAA,WAAW,CAACE,UAAD,EAAY;AACpB,QAAIA,UAAU,IAAI,KAAKT,KAAL,CAAWC,aAAX,CAAyBS,MAA3C,EAAkD;AAChD,WAAKV,KAAL,CAAWW,uBAAX;AACD;AACH;;AAxBmC;;AA2BpC,eAAeb,YAAf","sourcesContent":["//child component to Quiz.js and QuizQuestionButton\nimport React, {Component} from \"react\";\nimport QuizQuestionButton from \"./QuizQuestionButton.js\";\n\nclass QuizQuestion extends Component{\n    render(){\n      return <main> {/* RETURN REQUIRED */}\n      <section>\n        <p>{this.props.quiz_question.instruction_text}</p>\n      </section>\n      <section className=\"buttons\">\n        <ul >\n          {/* When you call this on an array, you can have it run through all the items in that array \n          and do something interesting with them â€“ in our case, returning a new array of JSX that can \n          be drawn. \n          \n          For every item in the array, it gives us the item itself in person and \n          the position of the item in index.*/}\n        {this.props.quiz_question.answer_options.map((answer_option, index) => (  //creates a new anonymous function (that's the => part) that receives answer_option & index as a parameter and will return a value of the modified data.\n         <QuizQuestionButton key={index} button_text = {answer_option} clickHandler = {this.handleClick.bind(this)}/>))} {/* React NEEDS a key attribute so that it knows which item is which. */}\n        </ul>\n      </section>\n    </main>\n    }\nhandleClick(buttonText){\n   if (buttonText == this.props.quiz_question.answer){\n     this.props.showNextQuestionHandler()\n   }\n}\n}\n\nexport default QuizQuestion"]},"metadata":{},"sourceType":"module"}